// isValidSudoku_36.cpp : 定义控制台应用程序的入口点。
//

/*
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
["5","3",".",".","7",".",".",".","."],
["6",".",".","1","9","5",".",".","."],
[".","9","8",".",".",".",".","6","."],
["8",".",".",".","6",".",".",".","3"],
["4",".",".","8",".","3",".",".","1"],
["7",".",".",".","2",".",".",".","6"],
[".","6",".",".",".",".","2","8","."],
[".",".",".","4","1","9",".",".","5"],
[".",".",".",".","8",".",".","7","9"]
]
输出: true

说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

bool isValidSudoku(vector<vector<char>>& board){

	vector<vector<bool>> row(9, vector<bool>(9, false));
	vector<vector<bool>> col(9, vector<bool>(9, false));
	vector<vector<bool>> matrix(9, vector<bool>(9, false));

	for (int i=0;i<9;i++)
	{
		for (int j=0;j<9;j++)
		{
			int n;
			switch (board[i][j])
			{
			case '.':
				continue;
			default:
				n = board[i][j] - '1';
			}
			if (row[i][n]||col[j][n]|| matrix[(i/3)*3+j/3][n])
			{
				return false;
			}
			else
			{
				row[i][n] = true;
				col[j][n] = true;
				matrix[(i / 3) * 3 + j / 3][n] = true;
			}
		}
	}
	return true;
}

int main()
{
	vector<vector<char>> board = {
		{ '8','3','.','.','7','.','.','.','.' },
		{ '6','.','.','1','9','5','.','.','.' },
		{ '.','9','8','.','.','.','.','6','.' },
		{ '8','.','.','.','6','.','.','.','3' },
		{ '4','.','.','8','.','3','.','.','1' },
		{ '7','.','.','.','2','.','.','.','6' },
		{ '.','6','.','.','.','.','2','8','.' },
		{ '.','.','.','4','1','9','.','.','5' },
		{ '.','.','.','.','8','.','.','7','9' }
	};
	cout << isValidSudoku(board);
    return 0;
}

